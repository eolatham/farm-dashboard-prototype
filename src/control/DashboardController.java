/**
 * This file was adapted from the "Sample Controller Skeleton"
 * generated by SceneBuilder.
 */

package control;

import boundary.Main;

import entity.Item;
import entity.ItemComponent;
import entity.ItemContainer;

import java.io.FileInputStream;
import java.lang.Integer;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.function.UnaryOperator;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.layout.Pane;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.Group;
import javafx.animation.TranslateTransition;
import javafx.animation.PathTransition;
import javafx.animation.PathTransition.*;
import javafx.scene.shape.*;
import javafx.util.Duration;
import javafx.scene.shape.Circle;

/*
 * Singleton design pattern
 */
public class DashboardController {
  @FXML
  private ResourceBundle resources;

  @FXML
  private URL location;

  @FXML
  private TextArea infoLog = new TextArea();

  @FXML
  private TreeView<ItemComponent> farmTreeView = new TreeView<ItemComponent>();

  @FXML
  private TextField selectionName = new TextField();

  @FXML
  private TextField selectionLocationX = new TextField();

  @FXML
  private TextField selectionLocationY = new TextField();

  @FXML
  private TextField selectionLength = new TextField();

  @FXML
  private TextField selectionWidth = new TextField();

  @FXML
  private TextField selectionHeight = new TextField();

  @FXML
  private TextField selectionPrice = new TextField();

  @FXML
  private TextField selectionAggregatePrice = new TextField();

  @FXML
  private Pane farmMap;
  
  private PathTransition droneAnimation = new PathTransition(); 

  private UnaryOperator<TextFormatter.Change> intFilter = new UnaryOperator<TextFormatter.Change>() {

    public TextFormatter.Change apply(TextFormatter.Change textField) {
      textField.setText(textField.getText().replaceAll("[^0-9]", ""));
      return textField;
    }
  };

  // Only here for singleton design pattern exercise
  private DashboardController instance = null;

  private Main main;

  /*
   * Only here for singleton design pattern exercise
   * Only public because FXML requires it to be
   */
  public DashboardController() {}

  /*
   * Only here for singleton design pattern exercise
   */
  public DashboardController getInstance() {
    if (instance == null) instance = new DashboardController();
    return instance;
  }

  @FXML
  public void initialize() {
    assert infoLog !=
    null : "fx:id=\"infoLog\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert farmTreeView !=
    null : "fx:id=\"farmTreeView\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionName !=
    null : "fx:id=\"selectionName\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionLocationX !=
    null : "fx:id=\"selectionLocationX\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionLocationY !=
    null : "fx:id=\"selectionLocationY\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionLength !=
    null : "fx:id=\"selectionLength\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionWidth !=
    null : "fx:id=\"selectionWidth\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionHeight !=
    null : "fx:id=\"selectionHeight\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionPrice !=
    null : "fx:id=\"selectionPrice\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionAggregatePrice !=
    null : "fx:id=\"selectionAggregatePrice\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert farmMap !=
    null : "fx:id=\"farmMap\" was not injected: check your FXML file 'Dashboard.fxml'.";
    infoLog.setEditable(false);
    selectionLocationX.setTextFormatter(new TextFormatter<>(intFilter));
    selectionLocationY.setTextFormatter(new TextFormatter<>(intFilter));
    selectionLength.setTextFormatter(new TextFormatter<>(intFilter));
    selectionWidth.setTextFormatter(new TextFormatter<>(intFilter));
    selectionHeight.setTextFormatter(new TextFormatter<>(intFilter));
    selectionPrice.setTextFormatter(new TextFormatter<>(intFilter));
    selectionAggregatePrice.setEditable(false);
  }

  public void setMain(Main main) {
    this.main = main;
    farmTreeView.setEditable(false);
    farmTreeView.setRoot(
      new TreeItem<ItemComponent>(main.getRootItemContainer())
    );
    farmTreeView.getRoot().setExpanded(true);
    ImageView imageView = new ImageView(main.getDrone().getIcon());
    imageView.toFront();
    droneAnimation.setNode(imageView);
    droneAnimation.setDuration(Duration.seconds(5));
    droneAnimation.setPath(new Rectangle(50, 50, 500, 700));
    droneAnimation.setCycleCount(1);
    farmMap.getChildren().add(droneAnimation.getNode());
    
  }

  private void addToInfoLog(String message) {
    infoLog.appendText(String.format("%s\n", message));
  }

  private TreeItem<ItemComponent> getCurrentSelection() {
    return farmTreeView.getSelectionModel().getSelectedItem();
  }

  private void addToFarmTreeViewAndFarmMap(ItemComponent component) {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) {
      addToInfoLog("Failed to add; nothing is selected");
      return;
    }
    ItemComponent selectionValue = selection.getValue();
    if (selectionValue instanceof Item) addToInfoLog(
      "Failed to add; Item is selected"
    ); else { // selection is an ItemContainer
      selection.getValue().addItemComponent(component);
      TreeItem<ItemComponent> treeItem = new TreeItem<ItemComponent>(component);
      treeItem.setExpanded(true);
      selection.getChildren().add(treeItem);
      farmMap.getChildren().add(component.getRectangle());
      addToInfoLog(
        String.format("%s added", component.getClass().getSimpleName())
      );
      droneAnimation.getNode().toFront();
    }
  }

  @FXML
  /*
   * Called when the "Add Item" button is clicked
   */
  public void addItem(ActionEvent event) {
    addToFarmTreeViewAndFarmMap(new Item());
  }

  @FXML
  /*
   * Called when the "Add ItemContainer" button is clicked
   */
  public void addItemContainer(ActionEvent event) {
    addToFarmTreeViewAndFarmMap(new ItemContainer());
  }

  @FXML
  /*
   * Called when the "Delete Selection" button is clicked
   */
  public void deleteSelection(ActionEvent event) {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) addToInfoLog(
      "Failed to delete; nothing is selected"
    ); else if (selection == farmTreeView.getRoot()) addToInfoLog(
      "Failed to delete; Root is selected"
    ); else {
      ItemComponent component = selection.getValue();
      TreeItem<ItemComponent> parent = selection.getParent();
      parent.getValue().deleteItemComponent(selection.getValue());
      parent.getChildren().remove(selection);
      farmMap.getChildren().removeAll(component.getRectangles());
      addToInfoLog("Selection deleted");
      loadSelectionDetails();
    }
  }

  private void refreshSelectionAggregatePrice(ItemComponent component) {
    selectionAggregatePrice.setText(
      String.format("%d", component.getAggregatePrice())
    );
  }

  @FXML
  /*
   * Called when the "Farm TreeView" is interacted with
   */
  public void loadSelectionDetails() {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) return;
    ItemComponent component = selection.getValue();
    selectionName.setText(component.getName());
    selectionLocationX.setText(String.format("%d", component.getLocationX()));
    selectionLocationY.setText(String.format("%d", component.getLocationY()));
    selectionLength.setText(String.format("%d", component.getLength()));
    selectionWidth.setText(String.format("%d", component.getWidth()));
    selectionHeight.setText(String.format("%d", component.getHeight()));
    selectionPrice.setText(String.format("%d", component.getPrice()));
    refreshSelectionAggregatePrice(component);
    addToInfoLog("Selection details loaded");
  }

  private int parseIntFromTextField(TextField textField) {
    String text = textField.getText();
    if (text.length() == 0) text = "0";
    return Integer.parseInt(text);
  }

  @FXML
  /*
   * Called when the "Update Selection" button is clicked
   */
  public void updateSelection(ActionEvent event) {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) addToInfoLog(
      "Failed to update; nothing is selected"
    ); else if (selection == farmTreeView.getRoot()) addToInfoLog(
      "Failed to update; Root is selected"
    ); else {
      ItemComponent component = selection.getValue();
      component.setName(selectionName.getText());
      component.setLocationX(parseIntFromTextField(selectionLocationX));
      component.setLocationY(parseIntFromTextField(selectionLocationY));
      component.setLength(parseIntFromTextField(selectionLength));
      component.setWidth(parseIntFromTextField(selectionWidth));
      component.setHeight(parseIntFromTextField(selectionHeight));
      component.setPrice(parseIntFromTextField(selectionPrice));
      selection.setValue(component);
      refreshSelectionAggregatePrice(component);
      farmTreeView.refresh();
      farmMap.getChildren().remove(component.getRectangle());
      farmMap.getChildren().add(component.getRectangle());
      addToInfoLog("Selection updated");
    }
  }
  
  @FXML
  /*
   * Called when the "Deploy Drone" button is clicked
   */
  public void deployDrone(ActionEvent event) {
	droneAnimation.play();
    addToInfoLog("Drone deployed");
  }
  
  
}
