/**
 * This file was adapted from the "Sample Controller Skeleton"
 * generated by SceneBuilder.
 */

// TODO: add ability to see and change marketValue for Items
package control;

import boundary.Main;
import entity.AggregatePurchasePriceVisitor;
import entity.Item;
import entity.ItemComponent;
import entity.ItemContainer;
import java.lang.Integer;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.function.UnaryOperator;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.KeyValue;
import javafx.animation.SequentialTransition;
import javafx.animation.Timeline;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.Group;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextFormatter;
import javafx.scene.control.TreeItem;
import javafx.scene.control.TreeView;
import javafx.scene.image.ImageView;
import javafx.util.Duration;

/*
 * Singleton design pattern
 */
public class DashboardController {
  @FXML
  private ResourceBundle resources;

  @FXML
  private URL location;

  @FXML
  private TextArea infoLog = new TextArea();

  private TreeItem<ItemComponent> rootTreeItem;
  private TreeItem<ItemComponent> commandCenterTreeItem;
  private TreeItem<ItemComponent> droneTreeItem;

  @FXML
  private TreeView<ItemComponent> farmTreeView = new TreeView<ItemComponent>();

  @FXML
  private TextField selectionName = new TextField();

  @FXML
  private TextField selectionLocationX = new TextField();

  @FXML
  private TextField selectionLocationY = new TextField();

  @FXML
  private TextField selectionLength = new TextField();

  @FXML
  private TextField selectionWidth = new TextField();

  @FXML
  private TextField selectionHeight = new TextField();

  @FXML
  private TextField selectionPurchasePrice = new TextField();

  @FXML
  private TextField selectionAggregatePurchasePrice = new TextField();

  private UnaryOperator<TextFormatter.Change> intFilter = new UnaryOperator<TextFormatter.Change>() {

    public TextFormatter.Change apply(TextFormatter.Change textField) {
      textField.setText(textField.getText().replaceAll("[^0-9]", ""));
      return textField;
    }
  };

  @FXML
  private Group farmMap = new Group();

  private ImageView droneIcon;

  // Used by the drone animations
  private Duration timelineDurationLong = Duration.seconds(1);

  // Used by the drone animations
  private Duration timelineDurationShort = Duration.seconds(0.5);

  // Used by the drone animations
  private KeyFrame startKeyFrame = null;

  // Used by the drone animations
  private Timeline goBackToBaseTimeline = null;

  private SequentialTransition visitSelectionAnimation = null;

  private SequentialTransition scanFarmAnimation = null;

  // Only here for singleton design pattern exercise
  private DashboardController instance = null;

  private Main main;

  /*
   * Only here for singleton design pattern exercise
   * Only public because FXML requires it to be
   */
  public DashboardController() {}

  /*
   * Only here for singleton design pattern exercise
   */
  public DashboardController getInstance() {
    if (instance == null) instance = new DashboardController();
    return instance;
  }

  @FXML
  public void initialize() {
    assert infoLog !=
    null : "fx:id=\"infoLog\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert farmTreeView !=
    null : "fx:id=\"farmTreeView\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionName !=
    null : "fx:id=\"selectionName\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionLocationX !=
    null : "fx:id=\"selectionLocationX\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionLocationY !=
    null : "fx:id=\"selectionLocationY\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionLength !=
    null : "fx:id=\"selectionLength\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionWidth !=
    null : "fx:id=\"selectionWidth\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionHeight !=
    null : "fx:id=\"selectionHeight\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionPurchasePrice !=
    null : "fx:id=\"selectionPurchasePrice\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert selectionAggregatePurchasePrice !=
    null : "fx:id=\"selectionAggregatePurchasePrice\" was not injected: check your FXML file 'Dashboard.fxml'.";
    assert farmMap !=
    null : "fx:id=\"farmMap\" was not injected: check your FXML file 'Dashboard.fxml'.";
    infoLog.setEditable(false);
    selectionLocationX.setTextFormatter(new TextFormatter<>(intFilter));
    selectionLocationY.setTextFormatter(new TextFormatter<>(intFilter));
    selectionLength.setTextFormatter(new TextFormatter<>(intFilter));
    selectionWidth.setTextFormatter(new TextFormatter<>(intFilter));
    selectionHeight.setTextFormatter(new TextFormatter<>(intFilter));
    selectionPurchasePrice.setTextFormatter(new TextFormatter<>(intFilter));
    selectionAggregatePurchasePrice.setEditable(false);
  }

  private void initializeStartKeyFrame() {
    if (startKeyFrame == null) {
      KeyValue startXKeyValue = new KeyValue(droneIcon.translateXProperty(), 0);
      KeyValue startYKeyValue = new KeyValue(droneIcon.translateYProperty(), 0);
      startKeyFrame =
        new KeyFrame(Duration.seconds(0), startXKeyValue, startYKeyValue);
    }
  }

  private void initializeGoBackToBaseTimeline() {
    if (goBackToBaseTimeline == null) {
      KeyValue goBackToBaseXKeyValue = new KeyValue(
        droneIcon.translateXProperty(),
        0
      );
      KeyValue goBackToBaseYKeyValue = new KeyValue(
        droneIcon.translateYProperty(),
        0
      );
      KeyFrame goBackToBaseKeyFrame = new KeyFrame(
        timelineDurationLong,
        goBackToBaseXKeyValue,
        goBackToBaseYKeyValue
      );
      goBackToBaseTimeline = new Timeline(goBackToBaseKeyFrame);
    }
  }

  private void initializeVisitSelectionAnimation() {
    if (visitSelectionAnimation == null) visitSelectionAnimation =
      new SequentialTransition();
  }

  private void initializeScanFarmAnimation() {
    if (scanFarmAnimation == null) {
      initializeStartKeyFrame();
      initializeGoBackToBaseTimeline();

      KeyValue goDownKeyValue = new KeyValue(
        droneIcon.translateYProperty(),
        700
      );
      KeyFrame goDownKeyFrame = new KeyFrame(
        timelineDurationLong,
        goDownKeyValue
      );
      Timeline goDownTimeline1 = new Timeline(startKeyFrame, goDownKeyFrame);
      Timeline goDownTimeline2 = new Timeline(goDownKeyFrame);
      Timeline goDownTimeline3 = new Timeline(goDownKeyFrame);

      KeyValue goRightKeyValue1 = new KeyValue(
        droneIcon.translateXProperty(),
        100
      );
      KeyValue goRightKeyValue2 = new KeyValue(
        droneIcon.translateXProperty(),
        200
      );
      KeyValue goRightKeyValue3 = new KeyValue(
        droneIcon.translateXProperty(),
        300
      );
      KeyValue goRightKeyValue4 = new KeyValue(
        droneIcon.translateXProperty(),
        400
      );
      KeyValue goRightKeyValue5 = new KeyValue(
        droneIcon.translateXProperty(),
        500
      );
      KeyFrame goRightKeyFrame1 = new KeyFrame(
        timelineDurationShort,
        goRightKeyValue1
      );
      KeyFrame goRightKeyFrame2 = new KeyFrame(
        timelineDurationShort,
        goRightKeyValue2
      );
      KeyFrame goRightKeyFrame3 = new KeyFrame(
        timelineDurationShort,
        goRightKeyValue3
      );
      KeyFrame goRightKeyFrame4 = new KeyFrame(
        timelineDurationShort,
        goRightKeyValue4
      );
      KeyFrame goRightKeyFrame5 = new KeyFrame(
        timelineDurationShort,
        goRightKeyValue5
      );
      Timeline goRightTimeline1 = new Timeline(goRightKeyFrame1);
      Timeline goRightTimeline2 = new Timeline(goRightKeyFrame2);
      Timeline goRightTimeline3 = new Timeline(goRightKeyFrame3);
      Timeline goRightTimeline4 = new Timeline(goRightKeyFrame4);
      Timeline goRightTimeline5 = new Timeline(goRightKeyFrame5);

      KeyValue goUpKeyValue = new KeyValue(droneIcon.translateYProperty(), 0);
      KeyFrame goUpKeyFrame = new KeyFrame(timelineDurationLong, goUpKeyValue);
      Timeline goUpTimeline1 = new Timeline(goUpKeyFrame);
      Timeline goUpTimeline2 = new Timeline(goUpKeyFrame);
      Timeline goUpTimeline3 = new Timeline(goUpKeyFrame);

      scanFarmAnimation =
        new SequentialTransition(
          goDownTimeline1,
          goRightTimeline1,
          goUpTimeline1,
          goRightTimeline2,
          goDownTimeline2,
          goRightTimeline3,
          goUpTimeline2,
          goRightTimeline4,
          goDownTimeline3,
          goRightTimeline5,
          goUpTimeline3,
          goBackToBaseTimeline
        );
      scanFarmAnimation.setCycleCount(1);
    }
  }

  public void setMain(Main main) {
    this.main = main;

    ItemContainer root = main.getRootItemContainer();
    root.setLength(800);
    root.setWidth(600);
    rootTreeItem = new TreeItem<ItemComponent>(root);
    ItemContainer commandCenter = new ItemContainer("Command Center");
    commandCenter.setLength(100);
    commandCenter.setWidth(100);
    commandCenterTreeItem = new TreeItem<ItemComponent>(commandCenter);
    Item drone = new Item("Drone");
    drone.setLength(100);
    drone.setWidth(100);
    drone.setPurchasePrice(1000);
    droneTreeItem = new TreeItem<ItemComponent>(drone);
    commandCenter.addItemComponent(drone);
    root.addItemComponent(commandCenter);

    farmTreeView.setEditable(false);
    farmTreeView.setRoot(rootTreeItem);
    commandCenterTreeItem.getChildren().add(droneTreeItem);
    rootTreeItem.getChildren().add(commandCenterTreeItem);
    rootTreeItem.setExpanded(true);
    commandCenterTreeItem.setExpanded(true);

    farmMap.getChildren().add(commandCenter.getRectangle());
    droneIcon = new ImageView(main.getDrone().getIcon());
    farmMap.getChildren().add(droneIcon);
    initializeStartKeyFrame();
    initializeGoBackToBaseTimeline();
    initializeVisitSelectionAnimation();
    initializeScanFarmAnimation();
  }

  private void sendDroneToFront() {
    droneIcon.toFront();
  }

  private void addToInfoLog(String message) {
    infoLog.appendText(String.format("%s\n", message));
  }

  private TreeItem<ItemComponent> getCurrentSelection() {
    return farmTreeView.getSelectionModel().getSelectedItem();
  }

  private void addToFarmTreeViewAndFarmMap(ItemComponent component) {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) {
      addToInfoLog("Failed to add; nothing is selected");
      return;
    }
    ItemComponent selectionValue = selection.getValue();
    if (selectionValue instanceof Item) addToInfoLog(
      "Failed to add; Item is selected"
    ); else { // selection is an ItemContainer
      selection.getValue().addItemComponent(component);
      TreeItem<ItemComponent> treeItem = new TreeItem<ItemComponent>(component);
      treeItem.setExpanded(true);
      selection.getChildren().add(treeItem);
      farmMap.getChildren().add(component.getRectangle());
      sendDroneToFront();
      addToInfoLog(
        String.format("%s added", component.getClass().getSimpleName())
      );
    }
  }

  @FXML
  /*
   * Called when the "Add Item" button is clicked
   */
  public void addItem(ActionEvent event) {
    addToFarmTreeViewAndFarmMap(new Item());
  }

  @FXML
  /*
   * Called when the "Add ItemContainer" button is clicked
   */
  public void addItemContainer(ActionEvent event) {
    addToFarmTreeViewAndFarmMap(new ItemContainer());
  }

  @FXML
  /*
   * Called when the "Delete Selection" button is clicked
   */
  public void deleteSelection(ActionEvent event) {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) addToInfoLog(
      "Failed to delete; nothing is selected"
    ); else if (selection == rootTreeItem) addToInfoLog(
      "Failed to delete; Root is selected"
    ); else if (selection == commandCenterTreeItem) addToInfoLog(
      "Failed to delete; Command Center is selected"
    ); else if (selection == droneTreeItem) addToInfoLog(
      "Failed to delete; Drone is selected"
    ); else {
      ItemComponent component = selection.getValue();
      TreeItem<ItemComponent> parent = selection.getParent();
      parent.getValue().deleteItemComponent(selection.getValue());
      parent.getChildren().remove(selection);
      farmMap.getChildren().removeAll(component.getRectangles());
      addToInfoLog("Selection deleted");
      loadSelectionDetails();
    }
  }

  private void refreshselectionAggregatePurchasePrice(ItemComponent component) {
    AggregatePurchasePriceVisitor visitor = new AggregatePurchasePriceVisitor();
    component.acceptVisitor(visitor);
    selectionAggregatePurchasePrice.setText(
      String.format("%d", visitor.value())
    );
  }

  @FXML
  /*
   * Called when the "Farm TreeView" is interacted with
   */
  public void loadSelectionDetails() {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) return;
    ItemComponent component = selection.getValue();
    selectionName.setText(component.getName());
    selectionLocationX.setText(String.format("%d", component.getLocationX()));
    selectionLocationY.setText(String.format("%d", component.getLocationY()));
    selectionLength.setText(String.format("%d", component.getLength()));
    selectionWidth.setText(String.format("%d", component.getWidth()));
    selectionHeight.setText(String.format("%d", component.getHeight()));
    selectionPurchasePrice.setText(
      String.format("%d", component.getPurchasePrice())
    );
    refreshselectionAggregatePurchasePrice(component);
    addToInfoLog("Selection details loaded");
  }

  private int parseIntFromTextField(TextField textField) {
    String text = textField.getText();
    if (text.length() == 0) text = "0";
    return Integer.parseInt(text);
  }

  @FXML
  /*
   * Called when the "Update Selection" button is clicked
   */
  public void updateSelection(ActionEvent event) {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (selection == null) addToInfoLog(
      "Failed to update; nothing is selected"
    ); else if (selection == rootTreeItem) addToInfoLog(
      "Failed to update; Root is selected"
    ); else if (selection == commandCenterTreeItem) addToInfoLog(
      "Failed to update; Command Center is selected"
    ); else if (selection == droneTreeItem) addToInfoLog(
      "Failed to update; Drone is selected"
    ); else {
      ItemComponent component = selection.getValue();
      component.setName(selectionName.getText());
      component.setLocationX(parseIntFromTextField(selectionLocationX));
      component.setLocationY(parseIntFromTextField(selectionLocationY));
      component.setLength(parseIntFromTextField(selectionLength));
      component.setWidth(parseIntFromTextField(selectionWidth));
      component.setHeight(parseIntFromTextField(selectionHeight));
      component.setPurchasePrice(parseIntFromTextField(selectionPurchasePrice));
      selection.setValue(component);
      refreshselectionAggregatePurchasePrice(component);
      farmTreeView.refresh();
      farmMap.getChildren().remove(component.getRectangle());
      farmMap.getChildren().add(component.getRectangle());
      sendDroneToFront();
      addToInfoLog("Selection updated");
    }
  }

  private Timeline goToSelectionTimeline(ItemComponent selection) {
    KeyValue goToSelectionXKeyValue = new KeyValue(
      droneIcon.translateXProperty(),
      selection.getLocationX()
    );
    KeyValue goToSelectionYKeyValue = new KeyValue(
      droneIcon.translateYProperty(),
      selection.getLocationY()
    );
    KeyFrame goToSelectionKeyFrame = new KeyFrame(
      timelineDurationLong,
      goToSelectionXKeyValue,
      goToSelectionYKeyValue
    );
    return new Timeline(startKeyFrame, goToSelectionKeyFrame);
  }

  private boolean droneIsDeployed() {
    return (
      scanFarmAnimation.getStatus() == Animation.Status.RUNNING ||
      visitSelectionAnimation.getStatus() == Animation.Status.RUNNING
    );
  }

  @FXML
  /*
   * Called when the "Visit Selection button is clicked
   */
  public void visitSelection() {
    TreeItem<ItemComponent> selection = getCurrentSelection();
    if (droneIsDeployed()) addToInfoLog(
      "Failed to visit; drone is already deployed"
    ); else if (selection == null) addToInfoLog(
      "Failed to visit; nothing is selected"
    ); else if (selection == rootTreeItem) addToInfoLog(
      "Failed to visit; Root is selected"
    ); else if (selection == commandCenterTreeItem) addToInfoLog(
      "Failed to visit; Command Center is selected"
    ); else if (selection == droneTreeItem) addToInfoLog(
      "Failed to visit; Drone is selected"
    ); else {
      visitSelectionAnimation =
        new SequentialTransition(
          goToSelectionTimeline(selection.getValue()),
          goBackToBaseTimeline
        );
      visitSelectionAnimation.setCycleCount(1);
      visitSelectionAnimation.play();
      addToInfoLog("Drone deployed");
    }
  }

  @FXML
  /*
   * Called when the "Scan Farm" button is clicked
   */
  public void scanFarm() {
    if (droneIsDeployed()) addToInfoLog(
      "Failed to scan; drone is already deployed"
    ); else {
      scanFarmAnimation.play();
      addToInfoLog("Drone deployed");
    }
  }
}
